// Generated by Xata Codegen 0.28.0. Please do not edit.
import { buildClient } from "@xata.io/client"
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord
} from "@xata.io/client"

const tables = [
  {
    name: "Courses",
    columns: [
      { name: "Name", type: "string", unique: true },
      { name: "Slug", type: "string", unique: true },
      { name: "Syllabus", type: "json" }
    ]
  },
  { name: "Blogs", columns: [] },
  {
    name: "Programs",
    columns: [
      { name: "Title", type: "string", unique: true },
      { name: "Description", type: "text" },
      { name: "Requirement", type: "text" }
    ]
  },
  { name: "Peoples", columns: [] }
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type Courses = InferredTypes["Courses"]
export type CoursesRecord = Courses & XataRecord

export type Blogs = InferredTypes["Blogs"]
export type BlogsRecord = Blogs & XataRecord

export type Programs = InferredTypes["Programs"]
export type ProgramsRecord = Programs & XataRecord

export type Peoples = InferredTypes["Peoples"]
export type PeoplesRecord = Peoples & XataRecord

export type DatabaseSchema = {
  Courses: CoursesRecord
  Blogs: BlogsRecord
  Programs: ProgramsRecord
  Peoples: PeoplesRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
  databaseURL:
    "https://Saad-Khatri-s-workspace-0qp24m.eu-central-1.xata.sh/db/csdb"
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables)
  }
}

let instance: XataClient | undefined = undefined

const getXataClient = () => {
  if (instance) return instance

  instance = new XataClient({
    apiKey: import.meta.env.XATA_API_KEY,
    branch: import.meta.env.XATA_BRANCH
  })
  return instance
}
export const xata = getXataClient()
