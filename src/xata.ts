// Generated by Xata Codegen 0.28.0. Please do not edit.
import { buildClient } from "@xata.io/client"
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client"

const tables = [
  {
    name: "Courses",
    columns: [
      { name: "Name", type: "string", unique: true },
      { name: "Slug", type: "string", unique: true },
      { name: "Overview", type: "string" },
      { name: "Syllabus", type: "json" },
    ],
  },
  {
    name: "Programs",
    columns: [
      { name: "Title", type: "string", unique: true },
      { name: "Description", type: "text" },
      { name: "Slug", type: "string", unique: true },
      { name: "Duration", type: "text" },
      { name: "Intake", type: "text" },
      { name: "Admissions", type: "text", defaultValue: "Once a year in June" },
      { name: "Eligibility", type: "text" },
      { name: "Acronym", type: "text" },
      { name: "KeyAreas", type: "multiple" },
    ],
  },
  {
    name: "Peoples",
    columns: [
      { name: "Name", type: "string", unique: true },
      { name: "Designation", type: "string" },
      { name: "Courses_Summer", type: "string" },
      { name: "Courses_Winter", type: "string" },
    ],
  },
  {
    name: "Resources",
    columns: [
      { name: "Category", type: "text" },
      { name: "Title", type: "text" },
      { name: "Url", type: "text" },
      { name: "Description", type: "text" },
      { name: "SubCategory", type: "text" },
    ],
  },
  {
    name: "NewsAndEvents",
    columns: [
      { name: "Type", type: "text", notNull: true, defaultValue: "News" },
      { name: "Tags", type: "multiple" },
      {
        name: "Title",
        type: "text",
        notNull: true,
        defaultValue: "Default Title From Xata",
      },
      { name: "Content", type: "text", defaultValue: "whatever" },
      { name: "Slug", type: "text", notNull: true, defaultValue: "slug-" },
      { name: "Description", type: "text" },
    ],
  },
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type Courses = InferredTypes["Courses"]
export type CoursesRecord = Courses & XataRecord

export type Programs = InferredTypes["Programs"]
export type ProgramsRecord = Programs & XataRecord

export type Peoples = InferredTypes["Peoples"]
export type PeoplesRecord = Peoples & XataRecord

export type Resources = InferredTypes["Resources"]
export type ResourcesRecord = Resources & XataRecord

export type NewsAndEvents = InferredTypes["NewsAndEvents"]
export type NewsAndEventsRecord = NewsAndEvents & XataRecord

export type DatabaseSchema = {
  Courses: CoursesRecord
  Programs: ProgramsRecord
  Peoples: PeoplesRecord
  Resources: ResourcesRecord
  NewsAndEvents: NewsAndEventsRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
  databaseURL: import.meta.env.XATA_DATABASE_URL,
  branch: import.meta.env.XATA_BRANCH,
  apiKey: import.meta.env.XATA_API_KEY,
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables)
  }
}

let instance: XataClient | undefined = undefined

export const getXataClient = () => {
  if (instance) return instance

  instance = new XataClient()
  return instance
}

export const xata = getXataClient()
